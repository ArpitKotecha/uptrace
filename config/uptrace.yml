##
## You can use environment variables anywhere in this file, for example:
##
##   foo: $FOO
##   bar: ${BAR}
##   $BAZ: baz
##
## To escape `$`, use `$$`, for example:
##
##   foo: $$FOO_BAR
##

projects:
  # Conventionally, the first project is used to monitor Uptrace itself.
  - id: 1
    name: Uptrace
    # Token grants write access to the project. Keep a secret.
    token: project1_secret_token
    pinned_attrs:
      - service.name
      - host.name
      - deployment.environment

  - id: 2
    name: My project
    token: project2_secret_token
    pinned_attrs:
      - service.name
      - host.name
      - deployment.environment

# To require authentication, uncomment the following section.
# users:
#   - id: 1
#     username: uptrace
#     password: uptrace

ch:
  # Connection string for ClickHouse database. For example:
  # clickhouse://<user>:<password>@<host>:<port>/<database>?sslmode=disable
  #
  # See https://clickhouse.uptrace.dev/guide/golang-clickhouse.html#options
  dsn: 'clickhouse://default:@localhost:9000/uptrace?sslmode=disable'

# Various options to tweak ClickHouse schema.
# Whenever you change these options, you must reset the ClickHouse database with `ch reset`.
ch_schema:
  # Compression codec, for example, LZ4, ZSTD(3), or Default.
  compression: ZSTD(3)

  # Whether to use ReplicatedMergeTree instead of MergeTree.
  replicated: false

  # Cluster name for Distributed tables and ON CLUSTER clause.
  #cluster: uptrace1

listen:
  # OTLP/gRPC API
  grpc: ':14317'
  # OTLP/HTTP API and Uptrace HTTP API
  http: ':14318'

# Public URL for Vue-powered UI.
site:
  addr: 'http://localhost:14318'

# Spans processing options.
spans:
  # Delete data after 30 days.
  # Supports SQL interval syntax, for example, INTERVAL 30 DAY.
  ttl: 30 DAY

  # The size of Go chan used to buffer incoming spans.
  # If the buffer is full, Uptrace starts to drop spans.
  #buffer_size: 100000

  # The number of spans to insert in a single query.
  #batch_size: 10000

# Metrics processing options.
metrics:
  # Delete data after 30 days.
  # Supports SQL interval syntax, for example, INTERVAL 30 DAY.
  ttl: 90 DAY

  # List of attributes to drop for being noisy.
  drop_attrs:
    - telemetry.sdk.language
    - telemetry.sdk.name
    - telemetry.sdk.version

  # The size of Go chan used to buffer incoming measures.
  # If the buffer is full, Uptrace starts to drop measures.
  #buffer_size: 100000

  # The number of measures to insert in a single query.
  #batch_size: 10000

# Alerting rules.
alerting:
  rules:
    - name: Network errors
      metrics:
        - system.network.errors as $net_errors
      query:
        - $net_errors > 0 group by host.name
      # for the last 5 minutes
      for: 5m
      # in the project id=2
      projects: [2]

    - name: Filesystem usage >= 90%
      metrics:
        - system.filesystem.usage as $fs_usage
      query:
        - group by host.name
        - group by device
        - where device !~ "loop"
        - $fs_usage{state="used"} / $fs_usage >= 0.9
      for: 5m
      projects: [2]

  # Create alerts from error logs and span events.
  errors:
    enabled: true
    labels:
      alert_kind: error

# AlertManager endpoints to create alerts and send notifications.
alertmanager:
  urls:
    - 'http://localhost:9093/api/v2/alerts'

# SQLite database that is used to store metadata such us metric names, dashboards, alerts,
# and so on.
db:
  dsn: 'file:uptrace.sqlite3?_foreign_keys=1&_busy_timeout=1000'

# Secret key that is used to sign JWT tokens etc.
secret_key: 102c1a557c314fc28198acd017960843

# Enable to log HTTP requests and database queries.
debug: false
